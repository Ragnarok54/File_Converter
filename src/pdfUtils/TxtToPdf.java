package pdfUtils;

import java.io.FileOutputStream;
import java.nio.file.Paths;
import java.util.Date;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import utils.FileParser;
import utils.line;

public class TxtToPdf {
	private static String FILE; // Holds the path from program folder to the file to be created
	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

	public TxtToPdf(String fileName) {
		FILE = Paths.get("").toAbsolutePath().toString() + "\\Files\\Output\\" + fileName + ".pdf";
		convert();
	}

	private void convert() {
		try {
			Document document = new Document();
			PdfWriter.getInstance(document, new FileOutputStream(FILE));
			document.open();
			addMetaData(document);
			addTitlePage(document);
			addContent(document);
			document.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// iText allows to add metadata to the PDF which can be viewed in your Adobe
	// Reader
	// under File -> Properties
	private static void addMetaData(Document document) {
		document.addTitle("Txt to PDF");
		document.addSubject("Using iText");
		document.addKeywords("Java, PDF, iText");
		document.addAuthor("Bogdan & Cristiana");
		document.addCreator("Bogdan & Cristiana");
	}

	private static void addTitlePage(Document document) throws DocumentException {
		Paragraph preface = new Paragraph();
		// Add one empty line
		addEmptyLine(preface, 1);
		// Write a big header
		preface.add(new Paragraph("Conversion from txt to PDF", catFont));

		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(),
				smallBold));
		// Add empty line
		addEmptyLine(preface, 3);
		// Write something about the content of the PDF
		preface.add(new Paragraph(
				"This document contains three txt files converted to a single PDF.\nThe content of each file is on a new page of the PDF.",
				smallBold));

		// Add the created preface to the document
		document.add(preface);
		// Start a new page
		document.newPage();
	}

	// Function that converts the content of the txt files into pdf tables
	private static void addContent(Document document) throws DocumentException {
		FileParser fileParser = new FileParser();
		int fileNumber = fileParser.getFileNumber();

		// For each txt file
		for (int fileIterator = 0; fileIterator < fileNumber; fileIterator++) {
			// Get the name of the current file without ".txt"
			String[] fileName = fileParser.getFileName().split(".txt");
			Anchor anchor = new Anchor(fileName[0], catFont);
			anchor.setName(fileName[0]);

			// The name of the chapter is the current file name, second parameter is the number of the chapter
			Chapter catPart = new Chapter(new Paragraph(anchor), fileIterator + 1);

			// Add empty line between the name of the chapter and the table
			Paragraph paragraph = new Paragraph();
			addEmptyLine(paragraph, 3);
			catPart.add(paragraph);

			// Create a table, the number of columns is the number of tags of a file
			PdfPTable table = new PdfPTable(fileParser.getAttributes().size());
			// For each line in file
			for (line fileLine : fileParser.getAttributes()) {
				// Create a column table which contains the content of a line in the current file
				PdfPTable columnTable = new PdfPTable(1);

				// Add a cell for the tag of the current line, color this cell yellow
				PdfPCell tagCell = new PdfPCell(new Phrase(fileLine.getTag()));
				tagCell.setHorizontalAlignment(Element.ALIGN_CENTER);
				tagCell.setBackgroundColor(BaseColor.YELLOW);
				// Add the tag to the column table
				columnTable.addCell(tagCell);

				// For each attribute in line
				for (String attribute : fileLine.getAttributes()) {
					// Create a new cell
					PdfPCell cell = new PdfPCell(new Phrase(attribute));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER);
					// Add the cell to the column table 
					columnTable.addCell(cell);
				}

				// Add the created column table to the main table
				table.addCell(columnTable);
			}

			// Add the name of the chapter and the table to the document
			document.add(catPart);
			document.add(table);
			// Go to the next text file
			fileParser.next();
		}

		// Create a new page
		document.newPage();
	}

	// Function to create an empty line 
	private static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}
}
