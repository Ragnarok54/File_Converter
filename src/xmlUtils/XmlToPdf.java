package xmlUtils;

import java.io.File;
import java.io.FileOutputStream;
import java.nio.file.Paths;
import java.util.Date;

import org.apache.log4j.Logger;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import application.main;
import javafx.util.Pair;

public class XmlToPdf implements ConvertFromXml {
	// Holds the name of the xml file
	private static String FILE;
	// Holds the absolute path to the application folder
	private String AbsPath = null;
	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
	// Logger
	static Logger log = Logger.getLogger(main.class.getName());

	
	public XmlToPdf(String fileName) {
		FILE = fileName;
		AbsPath = Paths.get("").toAbsolutePath().toString();
		convert();
	}

	@Override
	public void convert() {
		// TODO Auto-generated method stub
		try {
			Document document = new Document();
			// The name of the output file is the name of the xml file
			File outputFile = new File(AbsPath + "\\Files\\Output\\" + FILE + ".pdf");
			// If the name already exists in the Output folder, add (1) to the name
			if(outputFile.exists())
				outputFile = new File(AbsPath + "\\Files\\Output\\" + FILE + "(1).pdf");
			PdfWriter.getInstance(document, new FileOutputStream(outputFile));
			document.open();
			addMetaData(document);
			addTitlePage(document);
			addContent(document);
			document.close();
		} catch (Exception e) {
			log.error("Error while processing file");
			e.printStackTrace();
		}

	}

	// iText allows to add metadata to the PDF which can be viewed in your Adobe Reader under File -> Properties
	private static void addMetaData(Document document) {
		document.addTitle("XML to PDF");
		document.addSubject("Using iText");
		document.addKeywords("Java, PDF, iText");
		document.addAuthor("Bogdan & Cristiana");
		document.addCreator("Bogdan & Cristiana");
	}

	private static void addTitlePage(Document document) throws DocumentException {
		Paragraph preface = new Paragraph();
		// Add one empty line
		addEmptyLine(preface, 1);
		// Write a big header
		preface.add(new Paragraph("Conversion from XML to PDF", catFont));

		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), smallBold));
		// Add empty line
		addEmptyLine(preface, 3);
		// Write something about the content of the PDF
		preface.add(new Paragraph("This document contains an XML file converted to a PDF.\nThe content of each node is on a new page of the PDF.",
				smallBold));

		// Add the created preface to the document
		document.add(preface);
		// Start a new page
		document.newPage();
	}

	// Function that converts the content of the XML file into pdf table
	private static void addContent(Document document) throws DocumentException {
		XmlParser xmlParser = new XmlParser("files");
		int attributeIterator = 0;
		int chapterNumber = 1;
		
		// For each node in xml file
		for (Pair<String, Integer> node : xmlParser.getFileName()) {
			// The anchor is the name of the current node
			Anchor anchor = new Anchor(node.getKey(), catFont);
			anchor.setName(node.getKey());

			// The name of the chapter is the current node, second parameter is the number of the chapter
			Chapter catPart = new Chapter(new Paragraph(anchor), chapterNumber);

			// Add empty line between the name of the chapter and the table
			Paragraph paragraph = new Paragraph();
			addEmptyLine(paragraph, 3);
			catPart.add(paragraph);

			// Create a table, the number of columns is the number of tags 
			PdfPTable table = new PdfPTable(node.getValue());

			// For each line in current node
			for (int line = 0; line < node.getValue(); line++) {
				// Create a column table which contains the content of a line in the XML
				PdfPTable columnTable = new PdfPTable(1);

				// Add a cell for the tag of the current line, color this cell yellow
				PdfPCell tagCell = new PdfPCell(new Phrase(xmlParser.getAttributeList().get(line + attributeIterator).getTag()));
				tagCell.setHorizontalAlignment(Element.ALIGN_CENTER);
				tagCell.setBackgroundColor(BaseColor.YELLOW);
				
				// Add the tag to the column table
				columnTable.addCell(tagCell);
				
				// For each attribute in current line
				for (String atb : xmlParser.getAttributeList().get(line + attributeIterator).getAttributes()) {
					// Create a new cell
					PdfPCell cell = new PdfPCell(new Phrase(atb));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER);
					
					// Add the cell to the column table
					columnTable.addCell(cell);
				}
				
				// Add the created column table to the main table
				table.addCell(columnTable);
			}
			
			// Add the name of the chapter and the table to the document
			document.add(catPart);
			document.add(table);
			
			// Create a new page
			document.newPage();
			
			attributeIterator += node.getValue();
			chapterNumber++;
		}
	}

	// Function to create an empty line
	private static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}

	@Override
	public void write() {
		// TODO Auto-generated method stub

	}

}
